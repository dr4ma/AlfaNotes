package com.example.AlfaChat.ui.fragments.single_chat

import android.util.Log
import android.view.View
import androidx.recyclerview.widget.RecyclerView
import com.example.AlfaChat.R
import com.example.AlfaChat.models.CommonModel
import com.example.AlfaChat.ui.fragments.BaseFragment
import com.example.AlfaChat.utilits.*
import com.google.firebase.firestore.CollectionReference
import com.google.firebase.firestore.DocumentReference
import kotlinx.android.synthetic.main.activity_main.view.*
import kotlinx.android.synthetic.main.fragment_single_chat.*
import kotlinx.android.synthetic.main.toolbar_info.view.*


class SingleChatFragment(private val contact: CommonModel) : BaseFragment(R.layout.fragment_single_chat) {

    private lateinit var mToolBarInfo: View
    private lateinit var mRefUser: DocumentReference
    private lateinit var mRefMessages : CollectionReference
    private lateinit var mAdapter : SingleChatAdapter
    private lateinit var mRecyclerView : RecyclerView
    private lateinit var UserMessage : CommonModel

    override fun onResume() {
        super.onResume()
        mToolBarInfo = APP_ACTIVITY.toolBar.toolbar_info
        mToolBarInfo.visibility = View.VISIBLE

        updatingMessages()
        getToolbarInfo()

        send_message.setOnClickListener {
            val message = editText_write_message.text.toString()
            if(message.isNotEmpty()){

                sendMessage(message, contact.id, TYPE_TEXT){
                    editText_write_message.setText("")
                }
            }
        }

        initRecyclerView()

    }

    private fun initRecyclerView() {
        mRecyclerView = chat_recyclerView
        mAdapter = SingleChatAdapter()
        mRecyclerView.adapter = mAdapter
        mRefMessages = REF_DATABASE_ROOT.collection(NODE_MESSAGES).document(UID).collection(contact.id)
        mRefMessages.get().addOnCompleteListener {task ->
            
        }
    }

    override fun onPause() {
        super.onPause()
        mToolBarInfo.visibility = View.GONE

    }

    private fun updatingMessages() {
        editText_write_message.addTextChangedListener(AppTextWatcher {
            if (editText_write_message.text.isEmpty()) {
                voice_message.visibility = View.VISIBLE
                voice_message.isEnabled = true
                send_message.visibility = View.INVISIBLE
                send_message.isEnabled = false
            } else {
                voice_message.visibility = View.INVISIBLE
                voice_message.isEnabled = false
                send_message.visibility = View.VISIBLE
                send_message.isEnabled = true
            }
        })
    }

    private fun getToolbarInfo()
    {
        mRefUser = REF_DATABASE_ROOT.collection(NODE_USERS).document(contact.id)
        mRefUser